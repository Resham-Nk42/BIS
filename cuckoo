import numpy as np

values = [60, 100, 120]    
weights = [10, 20, 30]    
capacity = 50
n_items = len(values)


n_nests = 10        
pa = 0.25           
max_iter = 200


def fitness(solution):
    total_value = np.sum(np.array(values) * solution)
    total_weight = np.sum(np.array(weights) * solution)
    if total_weight > capacity:
        return -1 
    return total_value


def random_solution():
    sol = np.random.randint(0, 2, n_items)
    return sol


def levy_flight(solution):
    new_solution = solution.copy()
    for i in range(len(solution)):
        if np.random.rand() < 0.5:  
            new_solution[i] = 1 - new_solution[i]
    return new_solution


nests = [random_solution() for _ in range(n_nests)]
fitnesses = [fitness(s) for s in nests]

for _ in range(max_iter):
  
    for i in range(n_nests):
        new_sol = levy_flight(nests[i])
        new_fit = fitness(new_sol)
        if new_fit > fitnesses[i]:
            nests[i] = new_sol
            fitnesses[i] = new_fit
    
  
    for i in range(n_nests):
        if np.random.rand() < pa:
            nests[i] = random_solution()
            fitnesses[i] = fitness(nests[i])


best_index = np.argmax(fitnesses)
best_solution = nests[best_index]
best_value = fitnesses[best_index]

print("Best Solution (items taken):", best_solution)
print("Total Value:", best_value)
print("Total Weight:", np.sum(np.array(weights) * best_solution))
